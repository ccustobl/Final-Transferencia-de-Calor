clear
close all
clc

%% Starting Time
tic
disp('----------------------------------------')
[hours,minutes,seconds] = calc_time();
disp(strcat(['Starting Time: ',hours,':',minutes,':',seconds]))

%% Dimensiones del disipador y ubicacion del chip

% Board
BoardSide = 0.1;

% Heatsink (Base)
Length = 0.32; %m
BaseMaxWidth = 0.32; %m
BaseThickness = 0.128; %m

% Heatsink (Fins)
FinHeigth = 0.16; %m
FinThickness = 0.001; %m
FinSpacing = 0.002; %m
FinSection = Length * FinThickness; %m2
FinPerimeter = 2*Length + 2*FinThickness; %m

% To avoid Rounding Errors by Matlab, FinNumber and BaseWith is determined by this loop
FinNumber = 1;
while FinNumber*(FinThickness + FinSpacing) + FinThickness < BaseMaxWidth
    FinNumber = FinNumber + 1;
end
BaseWidth = (FinNumber -1)*(FinThickness + FinSpacing) + FinThickness; %m

%Heat-Pipe
HPNumber = 3;
HPSide = 0.008; %m
HPArea = HPNumber*HPSide*Length; %m2
HPk = 15000; %W/mk
HPt = 0.004; %m
qTotal = 400; %W
HPX1 = Length/(HPNumber*2)*1-HPSide/2; %m (X center coordinate of Transistor 1)
HPX2 = Length/(HPNumber*2)*3-HPSide/2; %m (X center coordinate of Transistor 2)
HPX3 = Length/(HPNumber*2)*5-HPSide/2; %m (X center coordinate of Transistor 2)


% Air Flow 
Uinf = 10; %m/s
Tinf = 20; %°C

%% Mesh Generation

% Square Volumes
volSide = 1e-3; %m
DX = volSide;
DY = volSide;

% X & Y Subdivisions
y = DY/2 : DY : BaseWidth - DY/2;
x = DX/2 : DX : Length - DX/2;
nVoly = length(y);
nVolx = length(x);

% Grid Creation
[X,Y] = meshgrid(x,y);

% Volume Indexation
nVols = nVoly*nVolx;
vols = zeros(nVols,2);
vols(:,1) = reshape(X',[],1);
vols(:,2) = reshape(Y',[],1);
index = zeros(nVoly,nVolx);
for iVol = 1:nVols   
    i = (BaseWidth-(vols(iVol,2)-DY/2))/DY;
    j = (vols(iVol,1)+DX/2)/DX;    
    index(round(i),round(j)) = iVol;
end

%% Heatsink Mesh Plot

% for iNode = 1:nVols
%     if isFinOnTop(vols(iNode,:), FinNumber, FinThickness, FinSpacing)
%         plot(vols(iNode,1), vols(iNode,2),'*y') % Yellow dot for Fins
%     elseif isTransistorBelow(vols(iNode,:), transistorX1, transistorX2, transistorY1, transistorY2, TransistorSide)
%         plot(vols(iNode,1), vols(iNode,2),'*r') % Red dot for Transistors
%     else
%         plot(vols(iNode,1), vols(iNode,2),'*k') % Black dot for the Base
%     end
%     hold on
% end
% axis square
% % Normal
% % xlim([0 0.32])
% % ylim([0 0.32])
% 
% % Zoom
% xlim([0.15 0.25])
% ylim([0.15 0.25])

%% Status Update

% Percentage Calculator
P_10 = floor(nVols/10);
Percen = P_10*(1:1:9);
flag = 0;
% Status Update
disp('----------------------------------------')
disp('Preparations COMPLETED')

%% Volumenes
B = zeros(nVols,1);
A = sparse(nVols);

Tstart = 22.15; %°C
Titeration = ones(nVols, 1)*Tstart;
Tmean_plot = Tstart;
Tmax_plot = Tstart;

iterate = true;
while iterate
    
    % Status Update
    disp('----------------------------------------')
    disp('Calculating A & BC')
    disp('0%')
    
    qOut_Fin=0; %W
    qOut_Base=0; %W
    qIn=0; %W
    
    for iNode = 1:nVols
        [i,j] = find(index==iNode);
        
        % Temperature in Use
        Tij = Titeration(iNode); %°C
         
        % Convection Coeficient
        hc = dryAir_hc_Turbulent(Uinf,Length,Tinf,Tij); %W/m2K
        
        % qTotal
        % qTotal = 200-(200/175)*(Tmean-25);

        % Conductivity
        k_Alu = Properties_Alu(Tij); %W/mK

        % Heat-pipe Checker
        if isHPBelow(vols(iNode,:), HPX1, HPX2, HPX3, HPSide)
            qGen = qTotal / HPArea * DX * DY;
            hpk = HPk;
            qIn = qIn+qGen; %W/m2 (Heat Generated by both Transistors)
        else
            hpk = 0;
            qGen =0;
        end


        % Fin Checker
        if isFinOnTop(vols(iNode,:), FinNumber, FinThickness, FinSpacing)
            % Variables used by Table 2.1 to aproximate qFin
            m = sqrt((hc*FinPerimeter) / (k_Alu*FinSection));
            M = (Tij-Tinf) * sqrt(hc*FinPerimeter*k_Alu*FinSection);
            
            % qf Calculation
            qf = M * (sinh(m*FinHeigth) + hc/(m*k_Alu) * cosh(m * FinHeigth) ) / ( cosh(m*FinHeigth) + hc/(m*k_Alu) * sinh(m*FinHeigth) ); %W
            qFin = qf / FinSection * DX * DY; %W    
            
            hc = 0; % hc = 0 since the surface of the base is not exposed to the airflow
            qOut_Fin = qOut_Fin + qFin; %W - Heat Dissipated by all Fins of the HS
        else
            qFin = 0; % qFin = 0 to avoid rounding errors
            hc = dryAir_hc_Turbulent(Uinf,Length,Tinf,Tij); %W/m2K
            qOut_Base = qOut_Base + hc*DX*DY*Tinf; %W - Heat Dissipated by the base of the HS
        end
        
        % A Calculation
        if i == 1 && j == 1
            
            % Esquina superior izquierda
            
            A(iNode,iNode) = -k_Alu * BaseThickness* (DX/DY + DY/DX) - hc*DX*DY;
            B(iNode) = -qGen - hc*DX*DY*Tinf + qFin;
            A(iNode,iNode-nVolx) = k_Alu * BaseThickness * DX/DY;
            A(iNode,iNode+1) = k_Alu* BaseThickness * DY/DX;
            
        elseif i == 1 && j == nVolx
            
            % Esquina superior derecha
            A(iNode,iNode) = -k_Alu* BaseThickness * (DX/DY + DY/DX) - hc*DX*DY;
            B(iNode) = -qGen - hc*DX*DY*Tinf + qFin;
            A(iNode,iNode-nVolx) = k_Alu* BaseThickness * DX/DY;
            A(iNode,iNode-1) = k_Alu* BaseThickness * DY/DX;
            
        elseif i == nVoly && j == 1
            
            % Esquina inferior izquierda
            
            A(iNode,iNode) = -k_Alu* BaseThickness * (DX/DY + DY/DX) - hc*DX*DY;
            B(iNode) = -qGen - hc*DX*DY*Tinf + qFin;
            A(iNode,iNode+nVolx) = k_Alu* BaseThickness * DX/DY;
            A(iNode,iNode+1) = k_Alu* BaseThickness * DY/DX;
            
        elseif i == nVoly && j == nVolx
            
            % Esquina inferior derecha
            
            A(iNode,iNode) = -k_Alu* BaseThickness * (DX/DY + DY/DX) - hc*DX*DY;
            B(iNode) = -qGen - hc*DX*DY*Tinf + qFin;
            A(iNode,iNode+nVolx) = k_Alu* BaseThickness * DX/DY;
            A(iNode,iNode-1) = k_Alu* BaseThickness * DY/DX;
            
        elseif i == 1
            
            % Borde norte
            
            A(iNode,iNode) = -k_Alu* BaseThickness * (DX/DY + 2*DY/DX) - hc*DX*DY;
            B(iNode) = -qGen - hc*DX*DY*Tinf + qFin;
            A(iNode,iNode-nVolx) = k_Alu* BaseThickness * DX/DY;
            A(iNode,iNode-1) = k_Alu* BaseThickness * DY/DX;
            A(iNode,iNode+1) = k_Alu* BaseThickness * DY/DX;
            
        elseif i == nVoly
            
            % Borde sur
            
            A(iNode,iNode) = -k_Alu* BaseThickness * (DX/DY + 2*DY/DX) - hc*DX*DY;
            B(iNode) = -qGen - hc*DX*DY*Tinf + qFin;
            A(iNode,iNode+nVolx) = k_Alu* BaseThickness * DX/DY;
            A(iNode,iNode-1) = k_Alu* BaseThickness * DY/DX;
            A(iNode,iNode+1) = k_Alu* BaseThickness * DY/DX;
            
        elseif j == 1
            
            % Borde oeste
 
            A(iNode,iNode) = -k_Alu* BaseThickness * (2*DX/DY + DY/DX) - hc*DX*DY;
            B(iNode) = -qGen - hc*DX*DY*Tinf + qFin;
            A(iNode,iNode+nVolx) = k_Alu* BaseThickness * DX/DY;
            A(iNode,iNode-nVolx) = k_Alu* BaseThickness * DX/DY;
            A(iNode,iNode+1) = k_Alu* BaseThickness * DY/DX;
            
        elseif j == nVolx
            
            % Borde este
            
            A(iNode,iNode) = -k_Alu* BaseThickness * (2*DX/DY + DY/DX) - hc*DX*DY;
            B(iNode) = -qGen - hc*DX*DY*Tinf + qFin;
            A(iNode,iNode+nVolx) = k_Alu* BaseThickness * DX/DY;
            A(iNode,iNode-nVolx) = k_Alu* BaseThickness * DX/DY;
            A(iNode,iNode-1) = k_Alu* BaseThickness * DY/DX;
            
        else
            
            %Volumenes Internos
            
            A(iNode,iNode) = -k_Alu* BaseThickness * (2*DX/DY + 2*DY/DX) - hc*DX*DY;
            B(iNode) = -qGen - hc*DX*DY*Tinf + qFin;
            A(iNode,iNode+nVolx) = k_Alu* BaseThickness * DX/DY;
            A(iNode,iNode-nVolx) = k_Alu* BaseThickness * DX/DY;
            A(iNode,iNode-1) = k_Alu* BaseThickness * DY/DX;
            A(iNode,iNode+1) = k_Alu* BaseThickness * DY/DX;
            
            
        end
        
        % Percentage Update (to display on the Command Window)
        if sum(iNode==Percen)==1
            flag = flag + 10;
            disp(strcat(num2str(flag),'%'))
        end
        if flag>=90
            flag = 0;
        end
    end
    
    % Status Update
    disp('100%')
    disp('A & BC CALCULATED')
    
    % Temperatura Calculation
    T = A\B;
 
    % Status Update
    disp('----------------------------------------')
    disp('T CALCULATED')
    
    % Iteration Condition
    if max(abs(T - Titeration)) < 0.1 % Diference of 0.1°C
        iterate = false;
    end
    
    % Extra Calculations
    Tdif = max(abs(T - Titeration));
    Titeration = Titeration + (T - Titeration) ./50; % Formula used to avoid sudden changes
    IterationNumber = length(Tmean_plot);
    Tmean_plot = [Tmean_plot  mean(mean(Titeration))];    
    Tmax_plot = [Tmax_plot  max(max(Titeration))];
    
    % Result Printing    
    disp('IterationNumber: ')
    disp(IterationNumber)
    
    disp('Temperature Diference [°C]: ')
    disp(Tdif)
    
    disp('Maximum Temperature [°C]: ')
    disp(max(max(T)))

    disp('Mean Temperature [°C]: ')
    disp(mean(mean(T)))
    
    disp('Heat Generated [W]: ')
    disp(qIn)

end

%% Result Verification

% Heat Disipated Verification
qOut = 0;
qOut_Fin = 0;
qOut_Base = 0;
for iNode = 1:nVols
    if isFinOnTop(vols(iNode,:), FinNumber, FinThickness, FinSpacing)
        Tij = T(iNode);
        hc = dryAir_hc_Turbulent(Uinf,Length,Tinf,Tij);
        m = sqrt( hc * FinPerimeter / (k_Alu * FinSection) );
        M = (Tij - Tinf) * sqrt(hc * FinPerimeter * k_Alu * FinSection);
        qf = M * ( sinh(m * FinHeigth) + hc / (m*k_Alu) * cosh(m * FinHeigth) ) / ...
                 ( cosh(m * FinHeigth) + hc / (m*k_Alu) * sinh(m * FinHeigth) );
        qFin = qf / FinSection * DX * DY;
        qOut = qOut + qFin;
        qOut_Fin = qOut_Fin + qFin;
    else
        Tij = T(iNode);
        hc = dryAir_hc_Turbulent(Uinf,Length,Tinf,Tij);
        qOut = qOut + DX*DY*hc*(T(iNode) - Tinf);
        qOut_Base = qOut_Base + DX*DY*hc*(T(iNode) - Tinf);
    end
end

% Heat Generated Verification
qIn = 0;
for iNode = 1:nVols
    if isHPBelow(vols(iNode,:), HPX1, HPX2, HPX3, HPSide)
        qGen = qTotal / HPArea * DX * DY;
    end
end

%% Result display

% Extra Calculaions
Vol = Length*BaseWidth*BaseThickness+FinNumber*FinThickness*Length*FinHeigth;
resTerm = (mean(mean(T)) - Tinf) / (2*qTotal);
maxT = 0;
for i=1:length(T)
    if T(i) > maxT
        maxT = T(i);
    end
end

% Displays
disp('Heat Generated [W]: ')
disp(qIn)

disp('Maximum Temperature [°C]: ')
disp(maxT)

disp('Mean Temperature [°C]: ')
disp(mean(mean(T)))

disp('Fin Numer: ')
disp(FinNumber)

disp('Volume [m3] :')
disp(Vol)

disp('Thermal Resistance [°C/W]: ')
disp(resTerm)

%% Graphics

% Extra Calculaions
T = reshape(T,nVolx,nVoly)';
[dTx,dTy] =  gradient(-T);

% Temperature Surf
figure
surf(X,Y,T)
view(0,90.001)
axis square
title('Distribución de Temperaturas','FontSize', 20)
colorbar
set(gca,'XTick',[], 'YTick', [])
xlim([0 0.32])
ylim([0 0.32])

% Heat Flow
figure
title('Flujo de Calor','FontSize', 20)
quiver(X,Y,dTx,dTy)
axis square
set(gca,'XTick',[], 'YTick', [])
xlim([0 0.32])
ylim([0 0.32])

% Isotherms
figure
title('Gráfico de Isotermas','FontSize', 20)
contour(X,Y,T,15)
axis square
colorbar
set(gca,'XTick',[], 'YTick', [])
xlim([0 0.32])
ylim([0 0.32])

% Tmean Convergence
figure
plot(Tmean_plot);

% Tmax Convergence
figure
plot(Tmax_plot);

%% Finishing Time
disp('----------------------------------------')
toc
disp('----------------------------------------')
[hours,minutes,seconds] = calc_time();
disp(strcat(['Finishing Time: ',hours,':',minutes,':',seconds]))
disp('----------------------------------------')

%% Dry Air Forced Convection hc
function h = dryAir_hc_Turbulent(Uinf,Largo,Tinf, Tsup)
TFilm = (Tinf + Tsup)/2;
[rho_Air, ~, ~, k_Air, mu_Air, ~, Pr_Air] = Properties_Air(TFilm);
Re = Uinf*rho_Air*Largo/mu_Air;
Nu = 0.036 * Pr_Air^(1/3) * Re^0.8; %Ec: 4.82
h = Nu*k_Air/Largo;
end

%% Dry Air Properties  (Table 28, page A26)
function [rho_Air, Beta_Air, Cp_Air, k_Air, mu_Air, nu_Air, Pr_Air] = Properties_Air(TFilm)
T = [0 20 40 60 80 100 200 300 400 500 1000]'; %C
rho = [1.252 1.164 1.092 1.025 0.968 0.916 0.723 0.596 0.508 0.442 0.268]';%kg/m3
Beta = [3.66 3.41 3.19 3.00 2.83 2.68 2.11 1.75 1.49 1.29 0.79];
Cp = [1011 1012 1014 1017 1019 1022 1035 1047 1059 1076 1139]'; %J/kgK
k = [0.0237 0.0251 0.0265 0.0279 0.0293 0.0307 0.0370 0.0429 0.0485 0.0540 0.0762]'; %W/mK
mu = [17.456 18.240 19.123 19.907 20.790 21.673 25.693 29.322 32.754 35.794 48.445]'*10^-6; %Ns/m2
nu = [13.9 15.7 17.6 19.4 21.5 23.6 35.5 49.2 64.6 81 181]'*10^-6; %m2/s
Pr = [0.71 0.71 0.71 0.71 0.71 0.71 0.71 0.71 0.72 0.72 0.74]';

rho_Air = interp1(T,rho,TFilm);
Beta_Air = interp1(T,Beta,TFilm);
Cp_Air = interp1(T,Cp,TFilm);
k_Air = interp1(T,k,TFilm);
mu_Air = interp1(T,mu,TFilm);
nu_Air = interp1(T,nu,TFilm);
Pr_Air = interp1(T,Pr,TFilm);
end

%% Aluminium Properties (Table 12, page A12)
function k_Alu = Properties_Alu(TFilm)
T = [-73 0 127 327 527]'; %C
k = [237 236 240 232 220]'; %W/mK

k_Alu = interp1(T,k,TFilm);
end

%% Heat-Pipe Checker
function isHP = isHPBelow(vols, HPX1, HPX2, HPX3, HPSide)
xRange1 = false;
xRange2 = false;
xRange3 = false;
isHP = false;
 
if (vols(1) > HPX1 - HPSide/2 && vols(1) < HPX1 + HPSide/2) 
    xRange1 = true;
elseif (vols(1) > HPX2 - HPSide/2 && vols(1) < HPX2 + HPSide/2)
    xRange2 = true;
elseif (vols(1) > HPX3 - HPSide/2 && vols(1) < HPX3 + HPSide/2)
    xRange3 = true;
end
 
if (xRange1 || xRange2 || xRange3)
    isHP = true;
end
 
end


%% Fin Checker
function pos = isFinOnTop(Node, FinNumber, FinWidth, FinSpacing)
pos = false;
if Node(2) < FinWidth
    pos = true;
else
    for iFin = 1:FinNumber-1
        if Node(2) > iFin*(FinSpacing + FinWidth) && Node(2) < iFin*(FinSpacing + FinWidth) + FinWidth
            pos = true;
            break;
        end
    end
end
end